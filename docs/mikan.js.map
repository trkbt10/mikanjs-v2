{"version":3,"file":"mikan.js","sources":["../src/utils.ts","../src/patterns.ts","../src/particle-data.ts","../src/particles.ts","../src/tokenizer-helpers.ts","../src/tokenizer.ts","../src/html.ts"],"sourcesContent":["/**\n * Utility functions\n */\n\nexport const esc = (s: string): string => {\n  return s.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n};\n","/**\n * Pattern definitions and regular expressions\n */\nimport { esc } from './utils.js';\n\n// 補助パターン\nexport const reBrOpen = /^[〈《「『｢（\\[\\(【〔〚〖〘❮❬❪❨<｛{❲❰]$/u;\nexport const reBrClose = /^[〉》」』｣）\\]\\)】〔〗〙〛❩❫❭❯❱❳❵｝}]$/u;\nexport const rePunctuation = /^[。、．…\\.!！?？,，:：;；]+$/u;\n\n// 漢字の後に結合するひらがなパターン（動詞・形容詞の活用形）\nexport const reKanjiFollowedHiragana = /^[\\p{Script=Hiragana}]+$/u;\n\n// 数字と単位のパターン（numbers.tsから移動）\nexport const reNumber = /^(?:[\\d０-９]+(?:[\\.,][\\d０-９]+)*|[〇零一二三四五六七八九十百千億兆京]+)$/u;\nexport const reNumberSuffix = /^[万]$/u;\n\nconst UNITS_RAW = `\n  px point pt pc dpi dppx\n  mm cm m km μm nm センチメートル キロ メートル\n  inch in ft yd mile knot ノット\n  g kg t mg μg ℊ グラム キログラム トン\n  l ml ℓ リットル\n  s ms sec 秒 分 min h hr 時間\n  Hz kHz MHz GHz\n  A mA V kV W kW Wh kWh\n  B KB MB GB TB KiB MiB GiB\n  ¥ 円 ￥ $ ＄ € €‎ £ ₩ 元\n  % ％ ‰ ‱ ㌫\n  ° ℃ ℉ 度\n  個 本 冊 枚 台 箱 匹 人 里 海里 畳 坪\n`.trim().split(/\\s+/);\n\nconst reUnit = new RegExp(\n  `^(?:${UNITS_RAW.sort((a, b) => b.length - a.length).map(esc).join(\"|\")})$`,\n  \"iu\"\n);\n\nexport const isNumber = (s: string): boolean => reNumber.test(s);\nexport const isNumberSuffix = (s: string): boolean => reNumberSuffix.test(s);\nexport const isUnit = (s: string): boolean => reUnit.test(s);\n\n// 独立した語として扱うべきパターン\nconst INDEPENDENT_WORDS = [\"こと\", \"もの\", \"ため\", \"ところ\", \"わけ\"];\nexport const reIndependentWord = new RegExp(`^(${INDEPENDENT_WORDS.join(\"|\")})$`, \"u\");\n\n// Master tokenization pattern\nexport const master = new RegExp(\n  [\n    \"&nbsp;\",\n    \"[\\\\s\\\\n]\",\n    \"[\\\\d０-９]+(?:[\\\\.,][\\\\d０-９]+)*\",\n    \"[A-Za-z0-9]+(?:\\\\.[A-Za-z]{2,})?\",\n    \"[\\\\p{Script=Katakana}ー]+\",\n    \"[\\\\p{Script=Hiragana}]+\",\n    \"[\\\\p{Script=Han}々〆ヵヶゝ]+\",\n    \"[〈《「『｢（\\\\[\\\\(【〔〚〖〘❮❬❪❨<｛{❲❰〉》」』｣）\\\\]\\\\)】〕〗〙〛❩❫❭❯❱❳❵｝}]\",\n    \"[。、．…\\\\.!！?？,，:：;；]+\",\n    \"[%％‰‱㌫]\"\n  ].join(\"|\"),\n  \"ug\"\n);\n","/**\n * Pre-generated particle data for improved performance\n * This file is auto-generated by scripts/create-particles.ts\n * Do not edit manually - run the script to regenerate\n */\n\nimport type { ParticleTuple } from './types.js';\n\n// 事前生成された助詞ツリー\nexport const PARTICLE_TREE_DATA: ParticleTuple = [\n  \"\",\n  0,\n  {\n    \"は\": [\n      \"は\",\n      1,\n      {}\n    ],\n    \"が\": [\n      \"が\",\n      1,\n      {}\n    ],\n    \"を\": [\n      \"を\",\n      1,\n      {\n        \"*\": [\n          \"*\",\n          0,\n          {\n            \"っ\": [\n              \"っ\",\n              0,\n              {\n                \"て\": [\n                  \"て\",\n                  1,\n                  {}\n                ]\n              }\n            ],\n            \"る\": [\n              \"る\",\n              1,\n              {}\n            ],\n            \"じ\": [\n              \"じ\",\n              1,\n              {\n                \"て\": [\n                  \"て\",\n                  1,\n                  {}\n                ]\n              }\n            ],\n            \"し\": [\n              \"し\",\n              1,\n              {\n                \"て\": [\n                  \"て\",\n                  1,\n                  {}\n                ]\n              }\n            ],\n            \"め\": [\n              \"め\",\n              1,\n              {\n                \"と\": [\n                  \"と\",\n                  0,\n                  {\n                    \"し\": [\n                      \"し\",\n                      0,\n                      {\n                        \"て\": [\n                          \"て\",\n                          1,\n                          {}\n                        ]\n                      }\n                    ]\n                  }\n                ]\n              }\n            ],\n            \"と\": [\n              \"と\",\n              0,\n              {\n                \"し\": [\n                  \"し\",\n                  0,\n                  {\n                    \"て\": [\n                      \"て\",\n                      1,\n                      {}\n                    ]\n                  }\n                ]\n              }\n            ],\n            \"に\": [\n              \"に\",\n              1,\n              {\n                \"し\": [\n                  \"し\",\n                  0,\n                  {\n                    \"て\": [\n                      \"て\",\n                      1,\n                      {}\n                    ]\n                  }\n                ]\n              }\n            ]\n          }\n        ],\n        \"は\": [\n          \"は\",\n          0,\n          {\n            \"じ\": [\n              \"じ\",\n              0,\n              {\n                \"め\": [\n                  \"め\",\n                  1,\n                  {}\n                ]\n              }\n            ]\n          }\n        ],\n        \"も\": [\n          \"も\",\n          0,\n          {\n            \"っ\": [\n              \"っ\",\n              0,\n              {\n                \"て\": [\n                  \"て\",\n                  1,\n                  {\n                    \"し\": [\n                      \"し\",\n                      0,\n                      {\n                        \"て\": [\n                          \"て\",\n                          1,\n                          {\n                            \"も\": [\n                              \"も\",\n                              1,\n                              {}\n                            ]\n                          }\n                        ]\n                      }\n                    ]\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    ],\n    \"に\": [\n      \"に\",\n      1,\n      {\n        \"は\": [\n          \"は\",\n          1,\n          {}\n        ],\n        \"て\": [\n          \"て\",\n          1,\n          {}\n        ],\n        \"し\": [\n          \"し\",\n          0,\n          {\n            \"て\": [\n              \"て\",\n              1,\n              {\n                \"も\": [\n                  \"も\",\n                  1,\n                  {}\n                ],\n                \"は\": [\n                  \"は\",\n                  1,\n                  {}\n                ]\n              }\n            ],\n            \"ろ\": [\n              \"ろ\",\n              1,\n              {}\n            ]\n          }\n        ],\n        \"せ\": [\n          \"せ\",\n          0,\n          {\n            \"よ\": [\n              \"よ\",\n              1,\n              {}\n            ]\n          }\n        ],\n        \"*\": [\n          \"*\",\n          1,\n          {\n            \"て\": [\n              \"て\",\n              1,\n              {\n                \"は\": [\n                  \"は\",\n                  1,\n                  {}\n                ]\n              }\n            ],\n            \"と\": [\n              \"と\",\n              1,\n              {}\n            ],\n            \"ば\": [\n              \"ば\",\n              1,\n              {}\n            ],\n            \"し\": [\n              \"し\",\n              1,\n              {\n                \"て\": [\n                  \"て\",\n                  1,\n                  {}\n                ]\n              }\n            ],\n            \"す\": [\n              \"す\",\n              0,\n              {\n                \"る\": [\n                  \"る\",\n                  1,\n                  {}\n                ]\n              }\n            ],\n            \"わ\": [\n              \"わ\",\n              0,\n              {\n                \"ら\": [\n                  \"ら\",\n                  0,\n                  {\n                    \"ず\": [\n                      \"ず\",\n                      1,\n                      {}\n                    ]\n                  }\n                ]\n              }\n            ]\n          }\n        ],\n        \"あ\": [\n          \"あ\",\n          0,\n          {\n            \"っ\": [\n              \"っ\",\n              0,\n              {\n                \"て\": [\n                  \"て\",\n                  1,\n                  {}\n                ]\n              }\n            ],\n            \"た\": [\n              \"た\",\n              0,\n              {\n                \"り\": [\n                  \"り\",\n                  1,\n                  {}\n                ],\n                \"っ\": [\n                  \"っ\",\n                  0,\n                  {\n                    \"て\": [\n                      \"て\",\n                      1,\n                      {}\n                    ]\n                  }\n                ]\n              }\n            ]\n          }\n        ],\n        \"お\": [\n          \"お\",\n          0,\n          {\n            \"い\": [\n              \"い\",\n              0,\n              {\n                \"て\": [\n                  \"て\",\n                  1,\n                  {}\n                ]\n              }\n            ],\n            \"け\": [\n              \"け\",\n              0,\n              {\n                \"る\": [\n                  \"る\",\n                  1,\n                  {}\n                ]\n              }\n            ]\n          }\n        ],\n        \"か\": [\n          \"か\",\n          0,\n          {\n            \"か\": [\n              \"か\",\n              0,\n              {\n                \"わ\": [\n                  \"わ\",\n                  0,\n                  {\n                    \"ら\": [\n                      \"ら\",\n                      0,\n                      {\n                        \"ず\": [\n                          \"ず\",\n                          1,\n                          {}\n                        ]\n                      }\n                    ]\n                  }\n                ]\n              }\n            ]\n          }\n        ],\n        \"も\": [\n          \"も\",\n          0,\n          {\n            \"か\": [\n              \"か\",\n              0,\n              {\n                \"か\": [\n                  \"か\",\n                  0,\n                  {\n                    \"わ\": [\n                      \"わ\",\n                      0,\n                      {\n                        \"ら\": [\n                          \"ら\",\n                          0,\n                          {\n                            \"ず\": [\n                              \"ず\",\n                              1,\n                              {}\n                            ]\n                          }\n                        ]\n                      }\n                    ]\n                  }\n                ]\n              }\n            ],\n            \"*\": [\n              \"*\",\n              0,\n              {\n                \"わ\": [\n                  \"わ\",\n                  0,\n                  {\n                    \"ら\": [\n                      \"ら\",\n                      0,\n                      {\n                        \"ず\": [\n                          \"ず\",\n                          1,\n                          {}\n                        ]\n                      }\n                    ]\n                  }\n                ]\n              }\n            ]\n          }\n        ],\n        \"と\": [\n          \"と\",\n          0,\n          {\n            \"っ\": [\n              \"っ\",\n              0,\n              {\n                \"て\": [\n                  \"て\",\n                  1,\n                  {\n                    \"は\": [\n                      \"は\",\n                      1,\n                      {}\n                    ],\n                    \"も\": [\n                      \"も\",\n                      1,\n                      {}\n                    ]\n                  }\n                ]\n              }\n            ]\n          }\n        ],\n        \"い\": [\n          \"い\",\n          0,\n          {\n            \"た\": [\n              \"た\",\n              0,\n              {\n                \"る\": [\n                  \"る\",\n                  0,\n                  {\n                    \"ま\": [\n                      \"ま\",\n                      0,\n                      {\n                        \"で\": [\n                          \"で\",\n                          1,\n                          {}\n                        ]\n                      }\n                    ]\n                  }\n                ],\n                \"っ\": [\n                  \"っ\",\n                  0,\n                  {\n                    \"て\": [\n                      \"て\",\n                      1,\n                      {\n                        \"は\": [\n                          \"は\",\n                          1,\n                          {}\n                        ]\n                      }\n                    ]\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    ],\n    \"へ\": [\n      \"へ\",\n      1,\n      {}\n    ],\n    \"と\": [\n      \"と\",\n      1,\n      {\n        \"は\": [\n          \"は\",\n          1,\n          {\n            \"い\": [\n              \"い\",\n              0,\n              {\n                \"え\": [\n                  \"え\",\n                  1,\n                  {}\n                ],\n                \"い\": [\n                  \"い\",\n                  0,\n                  {\n                    \"な\": [\n                      \"な\",\n                      0,\n                      {\n                        \"が\": [\n                          \"が\",\n                          0,\n                          {\n                            \"ら\": [\n                              \"ら\",\n                              1,\n                              {}\n                            ]\n                          }\n                        ]\n                      }\n                    ]\n                  }\n                ],\n                \"う\": [\n                  \"う\",\n                  0,\n                  {\n                    \"も\": [\n                      \"も\",\n                      0,\n                      {\n                        \"の\": [\n                          \"の\",\n                          0,\n                          {\n                            \"の\": [\n                              \"の\",\n                              1,\n                              {}\n                            ]\n                          }\n                        ]\n                      }\n                    ]\n                  }\n                ]\n              }\n            ]\n          }\n        ],\n        \"か\": [\n          \"か\",\n          1,\n          {\n            \"も\": [\n              \"も\",\n              1,\n              {}\n            ],\n            \"は\": [\n              \"は\",\n              1,\n              {}\n            ],\n            \"で\": [\n              \"で\",\n              1,\n              {}\n            ],\n            \"の\": [\n              \"の\",\n              1,\n              {}\n            ]\n          }\n        ],\n        \"も\": [\n          \"も\",\n          1,\n          {\n            \"に\": [\n              \"に\",\n              1,\n              {}\n            ],\n            \"か\": [\n              \"か\",\n              0,\n              {\n                \"く\": [\n                  \"く\",\n                  1,\n                  {}\n                ]\n              }\n            ],\n            \"あ\": [\n              \"あ\",\n              0,\n              {\n                \"れ\": [\n                  \"れ\",\n                  1,\n                  {}\n                ],\n                \"ろ\": [\n                  \"ろ\",\n                  0,\n                  {\n                    \"う\": [\n                      \"う\",\n                      1,\n                      {}\n                    ]\n                  }\n                ]\n              }\n            ]\n          }\n        ],\n        \"し\": [\n          \"し\",\n          0,\n          {\n            \"て\": [\n              \"て\",\n              1,\n              {\n                \"は\": [\n                  \"は\",\n                  1,\n                  {}\n                ],\n                \"も\": [\n                  \"も\",\n                  1,\n                  {}\n                ],\n                \"の\": [\n                  \"の\",\n                  1,\n                  {}\n                ]\n              }\n            ],\n            \"た\": [\n              \"た\",\n              1,\n              {}\n            ]\n          }\n        ],\n        \"と\": [\n          \"と\",\n          0,\n          {\n            \"も\": [\n              \"も\",\n              0,\n              {\n                \"に\": [\n                  \"に\",\n                  1,\n                  {}\n                ]\n              }\n            ]\n          }\n        ],\n        \"*\": [\n          \"*\",\n          0,\n          {\n            \"に\": [\n              \"に\",\n              1,\n              {}\n            ],\n            \"え\": [\n              \"え\",\n              0,\n              {\n                \"ど\": [\n                  \"ど\",\n                  1,\n                  {}\n                ]\n              }\n            ]\n          }\n        ],\n        \"い\": [\n          \"い\",\n          0,\n          {\n            \"え\": [\n              \"え\",\n              0,\n              {\n                \"ど\": [\n                  \"ど\",\n                  0,\n                  {\n                    \"も\": [\n                      \"も\",\n                      1,\n                      {}\n                    ]\n                  }\n                ],\n                \"ば\": [\n                  \"ば\",\n                  1,\n                  {}\n                ]\n              }\n            ],\n            \"う\": [\n              \"う\",\n              0,\n              {\n                \"と\": [\n                  \"と\",\n                  1,\n                  {}\n                ],\n                \"か\": [\n                  \"か\",\n                  1,\n                  {}\n                ]\n              }\n            ],\n            \"っ\": [\n              \"っ\",\n              0,\n              {\n                \"た\": [\n                  \"た\",\n                  1,\n                  {\n                    \"ら\": [\n                      \"ら\",\n                      1,\n                      {}\n                    ],\n                    \"と\": [\n                      \"と\",\n                      0,\n                      {\n                        \"こ\": [\n                          \"こ\",\n                          0,\n                          {\n                            \"ろ\": [\n                              \"ろ\",\n                              0,\n                              {\n                                \"で\": [\n                                  \"で\",\n                                  1,\n                                  {}\n                                ]\n                              }\n                            ]\n                          }\n                        ]\n                      }\n                    ]\n                  }\n                ]\n              }\n            ]\n          }\n        ],\n        \"な\": [\n          \"な\",\n          0,\n          {\n            \"る\": [\n              \"る\",\n              0,\n              {\n                \"と\": [\n                  \"と\",\n                  1,\n                  {}\n                ]\n              }\n            ],\n            \"れ\": [\n              \"れ\",\n              0,\n              {\n                \"ば\": [\n                  \"ば\",\n                  1,\n                  {}\n                ]\n              }\n            ],\n            \"っ\": [\n              \"っ\",\n              0,\n              {\n                \"て\": [\n                  \"て\",\n                  1,\n                  {\n                    \"は\": [\n                      \"は\",\n                      1,\n                      {}\n                    ]\n                  }\n                ]\n              }\n            ]\n          }\n        ],\n        \"こ\": [\n          \"こ\",\n          0,\n          {\n            \"ろ\": [\n              \"ろ\",\n              0,\n              {\n                \"で\": [\n                  \"で\",\n                  1,\n                  {}\n                ],\n                \"が\": [\n                  \"が\",\n                  1,\n                  {}\n                ],\n                \"へ\": [\n                  \"へ\",\n                  1,\n                  {}\n                ],\n                \"に\": [\n                  \"に\",\n                  1,\n                  {}\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    ],\n    \"で\": [\n      \"で\",\n      1,\n      {\n        \"は\": [\n          \"は\",\n          1,\n          {\n            \"な\": [\n              \"な\",\n              0,\n              {\n                \"い\": [\n                  \"い\",\n                  1,\n                  {\n                    \"か\": [\n                      \"か\",\n                      1,\n                      {}\n                    ]\n                  }\n                ],\n                \"か\": [\n                  \"か\",\n                  0,\n                  {\n                    \"ろ\": [\n                      \"ろ\",\n                      0,\n                      {\n                        \"う\": [\n                          \"う\",\n                          1,\n                          {\n                            \"か\": [\n                              \"か\",\n                              1,\n                              {}\n                            ]\n                          }\n                        ]\n                      }\n                    ]\n                  }\n                ],\n                \"く\": [\n                  \"く\",\n                  1,\n                  {\n                    \"て\": [\n                      \"て\",\n                      1,\n                      {}\n                    ]\n                  }\n                ]\n              }\n            ],\n            \"あ\": [\n              \"あ\",\n              0,\n              {\n                \"る\": [\n                  \"る\",\n                  0,\n                  {\n                    \"が\": [\n                      \"が\",\n                      1,\n                      {}\n                    ]\n                  }\n                ]\n              }\n            ]\n          }\n        ],\n        \"も\": [\n          \"も\",\n          1,\n          {\n            \"っ\": [\n              \"っ\",\n              0,\n              {\n                \"て\": [\n                  \"て\",\n                  1,\n                  {}\n                ]\n              }\n            ],\n            \"な\": [\n              \"な\",\n              0,\n              {\n                \"お\": [\n                  \"お\",\n                  1,\n                  {}\n                ]\n              }\n            ],\n            \"あ\": [\n              \"あ\",\n              0,\n              {\n                \"る\": [\n                  \"る\",\n                  1,\n                  {}\n                ],\n                \"り\": [\n                  \"り\",\n                  1,\n                  {}\n                ]\n              }\n            ]\n          }\n        ],\n        \"し\": [\n          \"し\",\n          0,\n          {\n            \"て\": [\n              \"て\",\n              1,\n              {}\n            ],\n            \"た\": [\n              \"た\",\n              1,\n              {\n                \"ら\": [\n                  \"ら\",\n                  1,\n                  {}\n                ]\n              }\n            ]\n          }\n        ],\n        \"さ\": [\n          \"さ\",\n          0,\n          {\n            \"え\": [\n              \"え\",\n              1,\n              {\n                \"も\": [\n                  \"も\",\n                  1,\n                  {}\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    ],\n    \"の\": [\n      \"の\",\n      1,\n      {\n        \"に\": [\n          \"に\",\n          1,\n          {\n            \"は\": [\n              \"は\",\n              1,\n              {}\n            ],\n            \"も\": [\n              \"も\",\n              1,\n              {}\n            ]\n          }\n        ]\n      }\n    ],\n    \"も\": [\n      \"も\",\n      1,\n      {\n        \"の\": [\n          \"の\",\n          1,\n          {\n            \"の\": [\n              \"の\",\n              1,\n              {}\n            ],\n            \"を\": [\n              \"を\",\n              1,\n              {}\n            ],\n            \"だ\": [\n              \"だ\",\n              1,\n              {\n                \"か\": [\n                  \"か\",\n                  0,\n                  {\n                    \"ら\": [\n                      \"ら\",\n                      1,\n                      {}\n                    ]\n                  }\n                ]\n              }\n            ],\n            \"か\": [\n              \"か\",\n              1,\n              {}\n            ],\n            \"な\": [\n              \"な\",\n              0,\n              {\n                \"ら\": [\n                  \"ら\",\n                  1,\n                  {}\n                ]\n              }\n            ]\n          }\n        ],\n        \"し\": [\n          \"し\",\n          0,\n          {\n            \"く\": [\n              \"く\",\n              0,\n              {\n                \"は\": [\n                  \"は\",\n                  1,\n                  {}\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    ],\n    \"や\": [\n      \"や\",\n      1,\n      {\n        \"ら\": [\n          \"ら\",\n          1,\n          {\n            \"か\": [\n              \"か\",\n              1,\n              {}\n            ],\n            \"な\": [\n              \"な\",\n              0,\n              {\n                \"ん\": [\n                  \"ん\",\n                  0,\n                  {\n                    \"や\": [\n                      \"や\",\n                      0,\n                      {\n                        \"ら\": [\n                          \"ら\",\n                          1,\n                          {}\n                        ]\n                      }\n                    ]\n                  }\n                ]\n              }\n            ],\n            \"で\": [\n              \"で\",\n              1,\n              {}\n            ]\n          }\n        ]\n      }\n    ],\n    \"か\": [\n      \"か\",\n      1,\n      {\n        \"ら\": [\n          \"ら\",\n          1,\n          {\n            \"も\": [\n              \"も\",\n              1,\n              {}\n            ],\n            \"は\": [\n              \"は\",\n              1,\n              {}\n            ],\n            \"こ\": [\n              \"こ\",\n              0,\n              {\n                \"そ\": [\n                  \"そ\",\n                  1,\n                  {}\n                ]\n              }\n            ],\n            \"し\": [\n              \"し\",\n              0,\n              {\n                \"て\": [\n                  \"て\",\n                  1,\n                  {}\n                ]\n              }\n            ],\n            \"に\": [\n              \"に\",\n              0,\n              {\n                \"は\": [\n                  \"は\",\n                  1,\n                  {}\n                ]\n              }\n            ],\n            \"と\": [\n              \"と\",\n              0,\n              {\n                \"い\": [\n                  \"い\",\n                  0,\n                  {\n                    \"っ\": [\n                      \"っ\",\n                      0,\n                      {\n                        \"て\": [\n                          \"て\",\n                          1,\n                          {}\n                        ]\n                      }\n                    ]\n                  }\n                ]\n              }\n            ]\n          }\n        ],\n        \"と\": [\n          \"と\",\n          0,\n          {\n            \"*\": [\n              \"*\",\n              0,\n              {\n                \"え\": [\n                  \"え\",\n                  0,\n                  {\n                    \"ば\": [\n                      \"ば\",\n                      1,\n                      {}\n                    ]\n                  }\n                ],\n                \"う\": [\n                  \"う\",\n                  0,\n                  {\n                    \"と\": [\n                      \"と\",\n                      1,\n                      {}\n                    ]\n                  }\n                ]\n              }\n            ],\n            \"い\": [\n              \"い\",\n              0,\n              {\n                \"う\": [\n                  \"う\",\n                  0,\n                  {\n                    \"と\": [\n                      \"と\",\n                      1,\n                      {}\n                    ]\n                  }\n                ],\n                \"え\": [\n                  \"え\",\n                  0,\n                  {\n                    \"ば\": [\n                      \"ば\",\n                      1,\n                      {}\n                    ]\n                  }\n                ],\n                \"っ\": [\n                  \"っ\",\n                  0,\n                  {\n                    \"て\": [\n                      \"て\",\n                      1,\n                      {}\n                    ]\n                  }\n                ]\n              }\n            ]\n          }\n        ],\n        \"ど\": [\n          \"ど\",\n          0,\n          {\n            \"う\": [\n              \"う\",\n              0,\n              {\n                \"か\": [\n                  \"か\",\n                  1,\n                  {}\n                ]\n              }\n            ]\n          }\n        ],\n        \"し\": [\n          \"し\",\n          0,\n          {\n            \"ら\": [\n              \"ら\",\n              1,\n              {}\n            ]\n          }\n        ],\n        \"な\": [\n          \"な\",\n          1,\n          {}\n        ],\n        \"も\": [\n          \"も\",\n          1,\n          {\n            \"し\": [\n              \"し\",\n              0,\n              {\n                \"れ\": [\n                  \"れ\",\n                  0,\n                  {\n                    \"な\": [\n                      \"な\",\n                      0,\n                      {\n                        \"い\": [\n                          \"い\",\n                          1,\n                          {}\n                        ]\n                      }\n                    ]\n                  }\n                ]\n              }\n            ]\n          }\n        ],\n        \"の\": [\n          \"の\",\n          0,\n          {\n            \"よ\": [\n              \"よ\",\n              0,\n              {\n                \"う\": [\n                  \"う\",\n                  0,\n                  {\n                    \"に\": [\n                      \"に\",\n                      1,\n                      {}\n                    ],\n                    \"な\": [\n                      \"な\",\n                      1,\n                      {}\n                    ]\n                  }\n                ]\n              }\n            ],\n            \"ご\": [\n              \"ご\",\n              0,\n              {\n                \"と\": [\n                  \"と\",\n                  0,\n                  {\n                    \"く\": [\n                      \"く\",\n                      1,\n                      {}\n                    ],\n                    \"き\": [\n                      \"き\",\n                      1,\n                      {}\n                    ]\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    ],\n    \"ね\": [\n      \"ね\",\n      1,\n      {}\n    ],\n    \"よ\": [\n      \"よ\",\n      1,\n      {\n        \"り\": [\n          \"り\",\n          1,\n          {\n            \"も\": [\n              \"も\",\n              1,\n              {}\n            ],\n            \"は\": [\n              \"は\",\n              1,\n              {}\n            ],\n            \"か\": [\n              \"か\",\n              1,\n              {}\n            ]\n          }\n        ]\n      }\n    ],\n    \"ぞ\": [\n      \"ぞ\",\n      1,\n      {}\n    ],\n    \"ぜ\": [\n      \"ぜ\",\n      1,\n      {}\n    ],\n    \"さ\": [\n      \"さ\",\n      1,\n      {\n        \"え\": [\n          \"え\",\n          1,\n          {\n            \"も\": [\n              \"も\",\n              1,\n              {}\n            ],\n            \"は\": [\n              \"は\",\n              1,\n              {}\n            ]\n          }\n        ],\n        \"て\": [\n          \"て\",\n          0,\n          {\n            \"は\": [\n              \"は\",\n              1,\n              {}\n            ]\n          }\n        ]\n      }\n    ],\n    \"わ\": [\n      \"わ\",\n      1,\n      {}\n    ],\n    \"な\": [\n      \"な\",\n      0,\n      {\n        \"の\": [\n          \"の\",\n          1,\n          {}\n        ],\n        \"が\": [\n          \"が\",\n          0,\n          {\n            \"ら\": [\n              \"ら\",\n              1,\n              {\n                \"も\": [\n                  \"も\",\n                  1,\n                  {}\n                ],\n                \"に\": [\n                  \"に\",\n                  1,\n                  {\n                    \"し\": [\n                      \"し\",\n                      0,\n                      {\n                        \"て\": [\n                          \"て\",\n                          1,\n                          {}\n                        ]\n                      }\n                    ]\n                  }\n                ]\n              }\n            ]\n          }\n        ],\n        \"ど\": [\n          \"ど\",\n          1,\n          {\n            \"は\": [\n              \"は\",\n              1,\n              {}\n            ],\n            \"も\": [\n              \"も\",\n              1,\n              {}\n            ],\n            \"か\": [\n              \"か\",\n              1,\n              {}\n            ],\n            \"と\": [\n              \"と\",\n              1,\n              {\n                \"い\": [\n                  \"い\",\n                  0,\n                  {\n                    \"う\": [\n                      \"う\",\n                      1,\n                      {}\n                    ]\n                  }\n                ]\n              }\n            ],\n            \"で\": [\n              \"で\",\n              1,\n              {}\n            ],\n            \"に\": [\n              \"に\",\n              1,\n              {}\n            ]\n          }\n        ],\n        \"ん\": [\n          \"ん\",\n          0,\n          {\n            \"て\": [\n              \"て\",\n              1,\n              {}\n            ],\n            \"か\": [\n              \"か\",\n              1,\n              {}\n            ]\n          }\n        ],\n        \"い\": [\n          \"い\",\n          0,\n          {\n            \"し\": [\n              \"し\",\n              1,\n              {\n                \"は\": [\n                  \"は\",\n                  1,\n                  {}\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    ],\n    \"ま\": [\n      \"ま\",\n      0,\n      {\n        \"で\": [\n          \"で\",\n          1,\n          {\n            \"も\": [\n              \"も\",\n              1,\n              {}\n            ],\n            \"は\": [\n              \"は\",\n              1,\n              {}\n            ],\n            \"に\": [\n              \"に\",\n              1,\n              {}\n            ],\n            \"し\": [\n              \"し\",\n              0,\n              {\n                \"て\": [\n                  \"て\",\n                  1,\n                  {}\n                ]\n              }\n            ],\n            \"が\": [\n              \"が\",\n              1,\n              {}\n            ]\n          }\n        ],\n        \"た\": [\n          \"た\",\n          0,\n          {\n            \"は\": [\n              \"は\",\n              1,\n              {}\n            ]\n          }\n        ]\n      }\n    ],\n    \"ば\": [\n      \"ば\",\n      0,\n      {\n        \"か\": [\n          \"か\",\n          0,\n          {\n            \"り\": [\n              \"り\",\n              1,\n              {\n                \"で\": [\n                  \"で\",\n                  1,\n                  {\n                    \"な\": [\n                      \"な\",\n                      0,\n                      {\n                        \"く\": [\n                          \"く\",\n                          1,\n                          {}\n                        ]\n                      }\n                    ],\n                    \"は\": [\n                      \"は\",\n                      1,\n                      {}\n                    ]\n                  }\n                ],\n                \"だ\": [\n                  \"だ\",\n                  1,\n                  {}\n                ],\n                \"か\": [\n                  \"か\",\n                  1,\n                  {}\n                ],\n                \"に\": [\n                  \"に\",\n                  1,\n                  {}\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    ],\n    \"だ\": [\n      \"だ\",\n      0,\n      {\n        \"け\": [\n          \"け\",\n          1,\n          {\n            \"は\": [\n              \"は\",\n              1,\n              {}\n            ],\n            \"に\": [\n              \"に\",\n              1,\n              {}\n            ],\n            \"し\": [\n              \"し\",\n              0,\n              {\n                \"か\": [\n                  \"か\",\n                  1,\n                  {}\n                ]\n              }\n            ],\n            \"で\": [\n              \"で\",\n              0,\n              {\n                \"な\": [\n                  \"な\",\n                  0,\n                  {\n                    \"く\": [\n                      \"く\",\n                      1,\n                      {}\n                    ]\n                  }\n                ],\n                \"は\": [\n                  \"は\",\n                  1,\n                  {}\n                ]\n              }\n            ],\n            \"ど\": [\n              \"ど\",\n              1,\n              {\n                \"も\": [\n                  \"も\",\n                  1,\n                  {}\n                ]\n              }\n            ]\n          }\n        ],\n        \"に\": [\n          \"に\",\n          1,\n          {}\n        ],\n        \"っ\": [\n          \"っ\",\n          0,\n          {\n            \"て\": [\n              \"て\",\n              1,\n              {}\n            ]\n          }\n        ],\n        \"の\": [\n          \"の\",\n          1,\n          {}\n        ]\n      }\n    ],\n    \"ほ\": [\n      \"ほ\",\n      0,\n      {\n        \"ど\": [\n          \"ど\",\n          1,\n          {\n            \"に\": [\n              \"に\",\n              1,\n              {}\n            ],\n            \"の\": [\n              \"の\",\n              1,\n              {}\n            ],\n            \"で\": [\n              \"で\",\n              0,\n              {\n                \"は\": [\n                  \"は\",\n                  1,\n                  {}\n                ],\n                \"も\": [\n                  \"も\",\n                  1,\n                  {}\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    ],\n    \"て\": [\n      \"て\",\n      0,\n      {\n        \"も\": [\n          \"も\",\n          1,\n          {\n            \"な\": [\n              \"な\",\n              0,\n              {\n                \"お\": [\n                  \"お\",\n                  1,\n                  {}\n                ]\n              }\n            ],\n            \"ま\": [\n              \"ま\",\n              0,\n              {\n                \"だ\": [\n                  \"だ\",\n                  1,\n                  {}\n                ]\n              }\n            ],\n            \"い\": [\n              \"い\",\n              0,\n              {\n                \"い\": [\n                  \"い\",\n                  1,\n                  {}\n                ]\n              }\n            ],\n            \"よ\": [\n              \"よ\",\n              0,\n              {\n                \"い\": [\n                  \"い\",\n                  1,\n                  {}\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    ],\n    \"く\": [\n      \"く\",\n      0,\n      {\n        \"ら\": [\n          \"ら\",\n          0,\n          {\n            \"い\": [\n              \"い\",\n              1,\n              {}\n            ]\n          }\n        ]\n      }\n    ],\n    \"ぐ\": [\n      \"ぐ\",\n      0,\n      {\n        \"ら\": [\n          \"ら\",\n          0,\n          {\n            \"い\": [\n              \"い\",\n              1,\n              {}\n            ]\n          }\n        ]\n      }\n    ],\n    \"し\": [\n      \"し\",\n      0,\n      {\n        \"か\": [\n          \"か\",\n          1,\n          {}\n        ]\n      }\n    ],\n    \"こ\": [\n      \"こ\",\n      0,\n      {\n        \"そ\": [\n          \"そ\",\n          1,\n          {}\n        ]\n      }\n    ],\n    \"す\": [\n      \"す\",\n      0,\n      {\n        \"ら\": [\n          \"ら\",\n          1,\n          {}\n        ]\n      }\n    ],\n    \"け\": [\n      \"け\",\n      0,\n      {\n        \"れ\": [\n          \"れ\",\n          0,\n          {\n            \"ど\": [\n              \"ど\",\n              1,\n              {\n                \"も\": [\n                  \"も\",\n                  1,\n                  {}\n                ]\n              }\n            ]\n          }\n        ],\n        \"ど\": [\n          \"ど\",\n          1,\n          {\n            \"も\": [\n              \"も\",\n              1,\n              {\n                \"さ\": [\n                  \"さ\",\n                  1,\n                  {}\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    ],\n    \"っ\": [\n      \"っ\",\n      0,\n      {\n        \"て\": [\n          \"て\",\n          1,\n          {\n            \"ば\": [\n              \"ば\",\n              1,\n              {}\n            ]\n          }\n        ],\n        \"た\": [\n          \"た\",\n          0,\n          {\n            \"っ\": [\n              \"っ\",\n              0,\n              {\n                \"て\": [\n                  \"て\",\n                  1,\n                  {}\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    ],\n    \"じ\": [\n      \"じ\",\n      0,\n      {\n        \"ゃ\": [\n          \"ゃ\",\n          1,\n          {\n            \"あ\": [\n              \"あ\",\n              1,\n              {}\n            ],\n            \"ね\": [\n              \"ね\",\n              1,\n              {}\n            ],\n            \"ん\": [\n              \"ん\",\n              1,\n              {}\n            ],\n            \"な\": [\n              \"な\",\n              0,\n              {\n                \"い\": [\n                  \"い\",\n                  1,\n                  {\n                    \"か\": [\n                      \"か\",\n                      1,\n                      {}\n                    ]\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    ],\n    \"つ\": [\n      \"つ\",\n      0,\n      {\n        \"つ\": [\n          \"つ\",\n          1,\n          {\n            \"も\": [\n              \"も\",\n              1,\n              {}\n            ],\n            \"あ\": [\n              \"あ\",\n              0,\n              {\n                \"る\": [\n                  \"る\",\n                  1,\n                  {}\n                ]\n              }\n            ]\n          }\n        ],\n        \"い\": [\n          \"い\",\n          0,\n          {\n            \"て\": [\n              \"て\",\n              0,\n              {\n                \"は\": [\n                  \"は\",\n                  1,\n                  {}\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    ],\n    \"あ\": [\n      \"あ\",\n      0,\n      {\n        \"る\": [\n          \"る\",\n          0,\n          {\n            \"い\": [\n              \"い\",\n              0,\n              {\n                \"は\": [\n                  \"は\",\n                  1,\n                  {}\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n];\n\n// 助詞の開始文字セット\nexport const particleStarters = new Set<string>([\"は\",\"が\",\"を\",\"に\",\"へ\",\"と\",\"で\",\"の\",\"も\",\"や\",\"か\",\"ね\",\"よ\",\"ぞ\",\"ぜ\",\"さ\",\"わ\",\"な\",\"ま\",\"ば\",\"だ\",\"ほ\",\"て\",\"く\",\"ぐ\",\"し\",\"こ\",\"す\",\"け\",\"っ\",\"じ\",\"つ\",\"あ\"]);\n","/**\n * Particle handling functions (助詞)\n * Contains both base functions and convenient wrapper functions\n */\nimport type { ParticleNode, ParticleTuple } from './types.js';\nimport { PARTICLE_TREE_DATA, particleStarters } from './particle-data.js';\n\n// 漢字プレースホルダー（動詞・名詞など任意の漢字列を表す）\nconst KANJI_PLACEHOLDER = \"*\";\n\n// tuple形式からParticleNodeにデシリアライズ（圧縮版：0/1 → boolean）\nconst deserializeParticleNode = (tuple: ParticleTuple): ParticleNode => {\n  const [value, isTerminalNum, childrenRecord] = tuple;\n  \n  const node: ParticleNode = {\n    value,\n    isTerminal: Boolean(isTerminalNum), // 0/1をbooleanに変換\n    children: new Map()\n  };\n  \n  for (const [key, childTuple] of Object.entries(childrenRecord)) {\n    node.children.set(key, deserializeParticleNode(childTuple));\n  }\n  \n  return node;\n};\n\n// パーティクルツリーを初期化する関数\nexport const createParticleTree = (treeData: ParticleTuple): ParticleNode => {\n  return deserializeParticleNode(treeData);\n};\n\n// 事前生成されたデータからツリーを初期化\nconst particleTree = createParticleTree(PARTICLE_TREE_DATA);\n\n// 文字列が助詞かどうかを判定（ツリーベース）\nconst isParticleWithTree = (particleTree: ParticleNode, s: string): boolean => {\n  let current = particleTree;\n  const chars = Array.from(s);\n  \n  for (const char of chars) {\n    if (!current.children.has(char)) {\n      return false;\n    }\n    current = current.children.get(char)!;\n  }\n  \n  return current.isTerminal;\n};\n\n// 最長一致で助詞を検索（漢字プレースホルダー対応版）\nconst findLongestParticleWithTree = (particleTree: ParticleNode, text: string, start: number): string | null => {\n  let current = particleTree;\n  let longestMatch: string | null = null;\n  let currentMatch = \"\";\n  let i = start;\n  \n  while (i < text.length) {\n    const char = text[i];\n    let advanced = false;\n    \n    // 通常の文字マッチを試す\n    if (current.children.has(char)) {\n      current = current.children.get(char)!;\n      currentMatch += char;\n      i++;\n      advanced = true;\n      \n      if (current.isTerminal) {\n        longestMatch = currentMatch;\n      }\n    }\n    \n    // 漢字プレースホルダーマッチを試す\n    if (!advanced && current.children.has(KANJI_PLACEHOLDER)) {\n      // 漢字が続く限りスキップ\n      const kanjiStart = i;\n      while (i < text.length && /[\\p{Script=Han}々〆ヵヶゝ]/u.test(text[i])) {\n        i++;\n      }\n      \n      // 漢字が見つかった場合のみプレースホルダーとしてマッチ\n      if (i > kanjiStart) {\n        current = current.children.get(KANJI_PLACEHOLDER)!;\n        currentMatch += text.substring(kanjiStart, i);\n        advanced = true;\n        \n        if (current.isTerminal) {\n          longestMatch = currentMatch;\n        }\n      }\n    }\n    \n    // どちらもマッチしなかった場合は終了\n    if (!advanced) {\n      break;\n    }\n  }\n  \n  return longestMatch;\n};\n\n// 高速化のための直接的な0/1判定関数（tuple形式での直接アクセス）\nexport const isParticleFast = (s: string): boolean => {\n  let current = PARTICLE_TREE_DATA;\n  const chars = Array.from(s);\n  \n  for (const char of chars) {\n    const children = current[2]; // children object\n    if (!(char in children)) {\n      return false;\n    }\n    current = children[char];\n  }\n  \n  return Boolean(current[1]); // isTerminal (0/1 → boolean)\n};\n\n// 最長一致検索の高速化版（tuple直接アクセス）\nexport const findLongestParticleFast = (text: string, start: number): string | null => {\n  let current = PARTICLE_TREE_DATA;\n  let longestMatch: string | null = null;\n  let currentMatch = \"\";\n  let i = start;\n  \n  while (i < text.length) {\n    const char = text[i];\n    let advanced = false;\n    const children = current[2]; // children object\n    \n    // 通常の文字マッチを試す\n    if (char in children) {\n      current = children[char];\n      currentMatch += char;\n      i++;\n      advanced = true;\n      \n      if (current[1]) { // isTerminal check (0/1)\n        longestMatch = currentMatch;\n      }\n    }\n    \n    // 漢字プレースホルダーマッチを試す\n    if (!advanced && KANJI_PLACEHOLDER in children) {\n      // 漢字が続く限りスキップ\n      const kanjiStart = i;\n      while (i < text.length && /[\\p{Script=Han}々〆ヵヶゝ]/u.test(text[i])) {\n        i++;\n      }\n      \n      // 漢字が見つかった場合のみプレースホルダーとしてマッチ\n      if (i > kanjiStart) {\n        current = children[KANJI_PLACEHOLDER];\n        currentMatch += text.substring(kanjiStart, i);\n        advanced = true;\n        \n        if (current[1]) { // isTerminal check (0/1)\n          longestMatch = currentMatch;\n        }\n      }\n    }\n    \n    // どちらもマッチしなかった場合は終了\n    if (!advanced) {\n      break;\n    }\n  }\n  \n  return longestMatch;\n};\n\n// 助詞の後に続く可能性のあるパターンを木から取得\nconst getParticleContinuationsWithTree = (particleTree: ParticleNode, particle: string): string[] => {\n  const continuations: string[] = [];\n  \n  // ツリーをたどって、この助詞から続く可能性のあるパターンを収集\n  function collectContinuations(node: ParticleNode, prefix: string) {\n    if (node.isTerminal && prefix.length > 0) {\n      continuations.push(prefix);\n    }\n    for (const [char, child] of node.children) {\n      collectContinuations(child, prefix + char);\n    }\n  }\n  \n  // 指定された助詞の位置を見つける\n  let current = particleTree;\n  for (const char of particle) {\n    if (!current.children.has(char)) {\n      return continuations;\n    }\n    current = current.children.get(char)!;\n  }\n  \n  // その位置から可能な継続パターンを収集\n  collectContinuations(current, \"\");\n  \n  return continuations;\n};\n\n// デバッグ用: 木構造を視覚化する関数\nconst showParticleTreeInternal = (particleTree: ParticleNode, prefix: string = \"\", isLast: boolean = true, depth: number = 0): void => {\n  if (depth === 0) {\n    console.log(\"助詞の木構造 (Trie):\")\n    console.log(\"※ '*' は任意の漢字列（動詞・名詞など）を表すプレースホルダー\");\n  }\n  \n  if (particleTree.value) {\n    const marker = isLast ? \"└── \" : \"├── \";\n    const terminal = particleTree.isTerminal ? \" ✓\" : \"\";\n    const displayValue = particleTree.value === KANJI_PLACEHOLDER ? \"[漢字]\" : particleTree.value;\n    console.log(prefix + marker + displayValue + terminal);\n  }\n  \n  const children = Array.from(particleTree.children.entries());\n  children.forEach(([char, child], index) => {\n    const isLastChild = index === children.length - 1;\n    const extension = particleTree.value ? (isLast ? \"    \" : \"│   \") : \"\";\n    showParticleTreeInternal(child, prefix + extension, isLastChild, depth + 1);\n  });\n};\n\n// デバッグ用: 特定の文字から始まる助詞パターンを表示\nconst showParticlesStartingWithInternal = (particleTree: ParticleNode, char: string): void => {\n  const node = particleTree.children.get(char);\n  if (!node) {\n    console.log(`「${char}」から始まる助詞パターンはありません`);\n    return;\n  }\n  \n  console.log(`「${char}」から始まる助詞パターン:`);\n  \n  function collectPatterns(node: ParticleNode, prefix: string): string[] {\n    const patterns: string[] = [];\n    if (node.isTerminal) {\n      patterns.push(prefix);\n    }\n    for (const [childChar, child] of node.children) {\n      patterns.push(...collectPatterns(child, prefix + childChar));\n    }\n    return patterns;\n  }\n  \n  const patterns = collectPatterns(node, char);\n  patterns.forEach(p => console.log(`  ${p}`));\n};\n\n// 便利な関数（ツリーを自動で渡す）\nexport const isParticle = (s: string): boolean => isParticleWithTree(particleTree, s);\nexport const findLongestParticle = (text: string, start: number): string | null => findLongestParticleWithTree(particleTree, text, start);\nexport const getParticleContinuations = (particle: string): string[] => getParticleContinuationsWithTree(particleTree, particle);\nexport const showParticleTree = (): void => showParticleTreeInternal(particleTree);\nexport const showParticlesStartingWith = (char: string): void => showParticlesStartingWithInternal(particleTree, char);\n\n// 助詞の開始文字セット\nexport { particleStarters };\n","/**\n * Tokenizer helper functions\n */\nimport { findLongestParticle } from './particles.js';\nimport { reBrClose } from './patterns.js';\n\n// トークン結合のカリー化ベースヘルパー\nexport const createTokenCombiner = (tokens: string[]) => {\n  return (startIndex: number) => {\n    let index = startIndex;\n    let current = tokens[index];\n    \n    const hasNext = () => index + 1 < tokens.length;\n    const peek = () => hasNext() ? tokens[index + 1] : undefined;\n    \n    const combine = () => {\n      if (hasNext()) {\n        current += tokens[++index];\n      }\n      return { current, index };\n    };\n    \n    const combineIf = (condition: boolean) => {\n      if (hasNext() && condition) {\n        return combine();\n      }\n      return { current, index };\n    };\n    \n    const combineWhile = (predicate: (next: string) => boolean) => {\n      while (hasNext() && peek() && predicate(peek()!)) {\n        combine();\n      }\n      return { current, index };\n    };\n    \n    return {\n      hasNext,\n      peek,\n      combine,\n      combineIf,\n      combineWhile,\n      get value() { return current; },\n      get pos() { return index; }\n    };\n  };\n};\n\n// ひらがなの長い文字列を助詞で分割（木構造を使用）\nexport const splitHiraganaByParticles = (token: string): string[] => {\n  if (!/^[\\p{Script=Hiragana}]+$/u.test(token) || token.length <= 2) {\n    return [token];\n  }\n\n  const subTokens: string[] = [];\n  let lastIdx = 0;\n  \n  for (let j = 0; j < token.length; j++) {\n    const particle = findLongestParticle(token, j);\n    if (particle) {\n      // 単独の「や」は動詞の一部の可能性があるのでスキップ\n      if (particle === \"や\" && j < token.length - 1) {\n        continue;\n      }\n      \n      // 「でも」の後に「ない」系が続く場合はスキップ（後で結合するため）\n      if (particle === \"でも\" && j + particle.length < token.length) {\n        const remaining = token.substring(j + particle.length);\n        if (/^(ない|なく|なかっ|なけれ)/.test(remaining)) {\n          continue;\n        }\n      }\n      \n      if (j > lastIdx) {\n        subTokens.push(token.substring(lastIdx, j) + particle);\n      } else if (subTokens.length > 0) {\n        subTokens[subTokens.length - 1] += particle;\n      } else {\n        subTokens.push(particle);\n      }\n      lastIdx = j + particle.length;\n      j = lastIdx - 1;\n    }\n  }\n  \n  if (lastIdx < token.length) {\n    subTokens.push(token.substring(lastIdx));\n  }\n  \n  return subTokens;\n};\n\n// 特別な結合パターン（括弧後の処理など）\nexport const shouldSkipParticleCombination = (currentToken: string, nextParticle: string): boolean => {\n  // 括弧の後の「でも」はスキップ（「でもない」として別途処理するため）\n  if (reBrClose.test(currentToken.slice(-1)) && nextParticle === \"でも\") {\n    return true;\n  }\n  return false;\n};\n","/**\n * Core tokenization functionality\n */\nimport { isNumber, isNumberSuffix, isUnit } from './patterns.js';\nimport { isParticle, particleStarters } from './particles.js';\nimport { \n  master, \n  reBrOpen, \n  reBrClose, \n  rePunctuation, \n  reKanjiFollowedHiragana, \n  reIndependentWord \n} from './patterns.js';\nimport { \n  createTokenCombiner, \n  splitHiraganaByParticles, \n  shouldSkipParticleCombination \n} from './tokenizer-helpers.js';\n\nexport const tokenize = (text: string): string[] => {\n  if (!text) return [\"\"];\n  const raw = [...text.matchAll(master)].map(m => m[0]);\n\n  // ひらがなの長い文字列を助詞で分割する処理\n  const processedRaw: string[] = [];\n  for (const token of raw) {\n    processedRaw.push(...splitHiraganaByParticles(token));\n  }\n\n  const out: string[] = [];\n  const combiner = createTokenCombiner(processedRaw);\n  \n  let i = 0;\n  while (i < processedRaw.length) {\n    const tc = combiner(i);\n\n    /* 漢字＋ひらがな結合（動詞・形容詞など） */\n    if (/^[\\p{Script=Han}々〆ヵヶゝ]+$/u.test(tc.value) && tc.peek() && reKanjiFollowedHiragana.test(tc.peek()!)) {\n      while (tc.peek() && reKanjiFollowedHiragana.test(tc.peek()!)) {\n        // 独立語（こと、もの等）で停止\n        if (reIndependentWord.test(tc.peek()!)) break;\n        // 助詞の開始要素で停止（ただし活用語尾は除く）\n        if (particleStarters.has(tc.peek()!) && tc.peek()!.length > 1) break;\n        \n        tc.combine();\n        \n        // 句読点が来たら結合して終了\n        if (tc.peek() && rePunctuation.test(tc.peek()!)) {\n          tc.combine();\n          break;\n        }\n      }\n    }\n    \n    /* 特定のカタカナ＋ひらがな結合 */\n    tc.combineIf(/^[\\p{Script=Katakana}ー]+$/u.test(tc.value) && tc.peek() === \"な\");\n    \n    /* 数字＋単位 */\n    if (isNumber(tc.value) && tc.peek()) {\n      if (isUnit(tc.peek()!) || isNumberSuffix(tc.peek()!)) {\n        tc.combine();\n        // 単位の後に句読点が続く場合、それも結合\n        tc.combineIf(tc.peek() ? rePunctuation.test(tc.peek()!) : false);\n        // さらにひらがなが続く場合も結合\n        tc.combineIf(tc.peek() ? /^[\\p{Script=Hiragana}]+$/u.test(tc.peek()!) : false);\n      }\n    }\n    \n    /* 括弧結合 */\n    if (reBrOpen.test(tc.value)) {\n      tc.combineWhile(next => !reBrClose.test(next));\n      tc.combineIf(true); // 閉じ括弧を結合\n      \n      // 括弧の後の特別な処理はしない（助詞結合で処理）\n    }\n    \n    /* 助詞結合 */\n    if (tc.peek() && isParticle(tc.peek()!) && !isParticle(tc.value)) {\n      // 特別な結合パターンのチェック\n      if (!shouldSkipParticleCombination(tc.value, tc.peek()!)) {\n        tc.combine();\n      }\n    }\n    \n    /* 複合助詞の継続パターン結合（「でもない」などの特別パターン） */\n    if (tc.value === \"でも\" && tc.peek() && /^(ない|なく|なかっ|なけれ)/.test(tc.peek()!)) {\n      tc.combine();\n      // 続く句読点も結合\n      tc.combineIf(tc.peek() ? rePunctuation.test(tc.peek()!) : false);\n    }\n    \n    /* 句読点結合 */\n    tc.combineIf(tc.peek() ? rePunctuation.test(tc.peek()!) && !rePunctuation.test(tc.value) : false);\n    \n    out.push(tc.value);\n    i = tc.pos + 1;\n  }\n  return out;\n};\n","/**\n * HTML wrapper functionality\n */\nimport type { SegmentOptions } from './types.js';\nimport { tokenize } from './tokenizer.js';\n\nexport const toHTML = (txt: string, opt: SegmentOptions = {}): string => {\n  const baseStyle = \"display:inline-block\";\n  const attr =\n    ` style=\"${baseStyle}${opt.style ? \";\" + opt.style : \"\"}\"` +\n    (opt.aria ?? true ? ` role=\"presentation\"` : \"\") +\n    (opt.className ? ` class=\"${opt.className}\"` : \"\");\n\n  return tokenize(txt).map(t => `<span${attr}>${t}</span>`).join(\"\");\n};\n"],"names":["esc","s","reBrOpen","reBrClose","rePunctuation","reKanjiFollowedHiragana","reNumber","reNumberSuffix","UNITS_RAW","reUnit","a","b","isNumber","isNumberSuffix","isUnit","INDEPENDENT_WORDS","reIndependentWord","master","PARTICLE_TREE_DATA","particleStarters","KANJI_PLACEHOLDER","deserializeParticleNode","tuple","value","isTerminalNum","childrenRecord","node","key","childTuple","particleTree","treeData","isParticleWithTree","current","chars","char","findLongestParticleWithTree","text","start","longestMatch","currentMatch","i","advanced","kanjiStart","isParticle","findLongestParticle","createTokenCombiner","tokens","startIndex","index","hasNext","peek","combine","condition","predicate","splitHiraganaByParticles","token","subTokens","lastIdx","j","particle","remaining","shouldSkipParticleCombination","currentToken","nextParticle","tokenize","raw","m","processedRaw","out","combiner","tc","next","toHTML","txt","opt","attr","t"],"mappings":"6NAIO,MAAMA,EAAOC,GACXA,EAAE,QAAQ,sBAAuB,MAAM,ECCnCC,EAAW,gCACXC,EAAY,gCACZC,EAAgB,yBAGhBC,EAA0B,4BAG1BC,EAAW,yDACXC,EAAiB,SAExBC,EAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAchB,KAAA,EAAO,MAAM,KAAK,EAEdC,EAAS,IAAI,OACjB,OAAOD,EAAU,KAAK,CAACE,EAAGC,IAAMA,EAAE,OAASD,EAAE,MAAM,EAAE,IAAIV,CAAG,EAAE,KAAK,GAAG,CAAC,KACvE,IACF,EAEaY,EAAYX,GAAuBK,EAAS,KAAKL,CAAC,EAClDY,EAAkBZ,GAAuBM,EAAe,KAAKN,CAAC,EAC9Da,EAAUb,GAAuBQ,EAAO,KAAKR,CAAC,EAGrDc,EAAoB,CAAC,KAAM,KAAM,KAAM,MAAO,IAAI,EAC3CC,EAAoB,IAAI,OAAO,KAAKD,EAAkB,KAAK,GAAG,CAAC,KAAM,GAAG,EAGxEE,EAAS,IAAI,OACxB,CACE,SACA,WACA,gCACA,mCACA,2BACA,0BACA,0BACA,yDACA,uBACA,SAAA,EACA,KAAK,GAAG,EACV,IACF,ECpDaC,EAAoC,CAC/C,GACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CACE,IAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,CACF,CACF,CACF,CACF,CACF,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,IAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,CACF,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,CACF,CACF,CACF,CACF,EAEF,IAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,CACF,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,CACF,CACF,CACF,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,CACF,CACF,CACF,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,EAEF,IAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,CACF,CACF,CACF,CACF,CACF,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,CACF,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,IAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,CACF,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,CACF,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,CACF,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,CACF,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,EAEH,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CAAA,CAAC,CACH,CACF,CACF,CACF,EAEF,EAAK,CACH,IACA,EACA,CACE,EAAK,CACH,IACA,EACA,CACE,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"}